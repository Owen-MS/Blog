(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{411:function(t,a,s){"use strict";s.r(a);var r=s(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-浏览器中的页面循环系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器中的页面循环系统"}},[t._v("#")]),t._v(" 4-浏览器中的页面循环系统")]),t._v(" "),s("h2",{attrs:{id:"_01-消息队列和事件循环系统-页面是怎么-活-起来的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-消息队列和事件循环系统-页面是怎么-活-起来的"}},[t._v("#")]),t._v(' 01｜消息队列和事件循环系统：页面是怎么"活"起来的？')]),t._v(" "),s("h3",{attrs:{id:"消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),s("h3",{attrs:{id:"事件循环系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环系统"}},[t._v("#")]),t._v(" 事件循环系统")]),t._v(" "),s("h2",{attrs:{id:"_02-webapi-settimeout是如何实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-webapi-settimeout是如何实现的"}},[t._v("#")]),t._v(" 02｜webAPI：setTimeout是如何实现的？")]),t._v(" "),s("ul",[s("li",[t._v("首先为了支持定时器的实现，浏览器增加来延时队列")]),t._v(" "),s("li",[t._v("其次，由于消息队列排队和一下系统级别的限制，通过setTimeout设置的回调任务并非总是可以实时的被执行，这样就不能满足一些\n实时性比较高的的需求了")])]),t._v(" "),s("p",[t._v("hashmap结构，等到执行这个结构的时候，会计算hashmap中每个任务是否到期了，到期了就去执行，直到所有到期的任务都执行结束，\n才会进入下一轮循环。")]),t._v(" "),s("h2",{attrs:{id:"_03-webapi-xmlhttprequest是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-webapi-xmlhttprequest是怎么实现的"}},[t._v("#")]),t._v(" 03｜WebAPI：XMLHttpRequest是怎么实现的？")]),t._v(" "),s("h2",{attrs:{id:"_04-宏任务和微任务-不是所有任务都是一个待遇。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-宏任务和微任务-不是所有任务都是一个待遇。"}},[t._v("#")]),t._v(" 04｜宏任务和微任务：不是所有任务都是一个待遇。")]),t._v(" "),s("h3",{attrs:{id:"宏任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),s("ul",[s("li",[t._v("渲染事件（如解析DOM、计算布局、绘制）")]),t._v(" "),s("li",[t._v("用户交互事件（如鼠标点击、滚动页面、放大缩小等）；")]),t._v(" "),s("li",[t._v("Javascript脚本执行事件。")]),t._v(" "),s("li",[t._v("网络请求完成、文件读写完成事件。")])]),t._v(" "),s("h3",{attrs:{id:"微任务-可以在实时性和效率之间做一个有效的权衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务-可以在实时性和效率之间做一个有效的权衡"}},[t._v("#")]),t._v(" 微任务-可以在实时性和效率之间做一个有效的权衡")]),t._v(" "),s("h2",{attrs:{id:"_05-promise-使用promise-告别回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-promise-使用promise-告别回调函数"}},[t._v("#")]),t._v(" 05｜Promise：使用Promise，告别回调函数")]),t._v(" "),s("p",[t._v("异步回调-回调地狱")]),t._v(" "),s("h2",{attrs:{id:"_06-async-await-使用同步的方式去写异步代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-async-await-使用同步的方式去写异步代码"}},[t._v("#")]),t._v(" 06｜async/await：使用同步的方式去写异步代码")]),t._v(" "),s("p",[t._v("生成器就是协程的一种实现方式。")])])}),[],!1,null,null,null);a.default=e.exports}}]);