(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{430:function(t,a,s){"use strict";s.r(a);var _=s(45),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"中等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中等"}},[t._v("#")]),t._v(" 中等")]),t._v(" "),s("h2",{attrs:{id:"_1、webpack优化手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、webpack优化手段"}},[t._v("#")]),t._v(" 1、webpack优化手段")]),t._v(" "),s("h3",{attrs:{id:"时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间"}},[t._v("#")]),t._v(" 时间")]),t._v(" "),s("ul",[s("li",[t._v("缩减范围")]),t._v(" "),s("li",[t._v("缓存副本")]),t._v(" "),s("li",[t._v("定向搜索")]),t._v(" "),s("li",[t._v("提前构建")]),t._v(" "),s("li",[t._v("并行构建")]),t._v(" "),s("li",[t._v("可视结构")])]),t._v(" "),s("h3",{attrs:{id:"体积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#体积"}},[t._v("#")]),t._v(" 体积")]),t._v(" "),s("ul",[s("li",[t._v("分割代码")]),t._v(" "),s("li",[t._v("摇树优化")]),t._v(" "),s("li",[t._v("动态垫片")]),t._v(" "),s("li",[t._v("按需加载")]),t._v(" "),s("li",[t._v("作用提升")]),t._v(" "),s("li",[t._v("资源压缩")])]),t._v(" "),s("h2",{attrs:{id:"_2、css怎么开启硬件加速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、css怎么开启硬件加速"}},[t._v("#")]),t._v(" 2、CSS怎么开启硬件加速")]),t._v(" "),s("ul",[s("li",[t._v("transform：translateZ（0）/translate3d（0，0，0）")]),t._v(" "),s("li",[t._v("will-change： opacity、transform、top、left、bottom、right；")])]),t._v(" "),s("h3",{attrs:{id:"渲染引擎为哪些特定节点创建新的图层呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎为哪些特定节点创建新的图层呢"}},[t._v("#")]),t._v(" 渲染引擎为哪些特定节点创建新的图层呢？")]),t._v(" "),s("ul",[s("li",[t._v("第一点：拥有层叠上下文属性的元素会被提升为单独的一层。")]),t._v(" "),s("li",[t._v("第二点：需要裁剪（clip）的地方也会被创建为图层。")])]),t._v(" "),s("h2",{attrs:{id:"_3、常见的设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、常见的设计模式"}},[t._v("#")]),t._v(" 3、常见的设计模式")]),t._v(" "),s("ul",[s("li",[t._v("工厂模式")]),t._v(" "),s("li",[t._v("单例模式")]),t._v(" "),s("li",[t._v("发布订阅/观察者模式")]),t._v(" "),s("li",[t._v("装饰器模式")])]),t._v(" "),s("h2",{attrs:{id:"_4、缓存策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、缓存策略"}},[t._v("#")]),t._v(" 4、缓存策略")]),t._v(" "),s("p",[t._v("存储图像、网页等资源主要缓存在disk cache，操作系统缓存文件大部分都放在memory cache中。\n具体浏览器会自动分配，看谁的资源利用率不高就分配给谁。")]),t._v(" "),s("p",[t._v("查找顺序")]),t._v(" "),s("p",[t._v("service-worker -> memory-cache ->Disk cache -> Push cache;")]),t._v(" "),s("h3",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),s("ul",[s("li",[t._v("max-age")]),t._v(" "),s("li",[t._v("expires")])]),t._v(" "),s("h3",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("ul",[s("li",[t._v("Etag/if-none-Match")]),t._v(" "),s("li",[t._v("last-modified/if-modified-since")])]),t._v(" "),s("p",[t._v("cache-control：")]),t._v(" "),s("ul",[s("li",[t._v("no-store")]),t._v(" "),s("li",[t._v("no-cache")]),t._v(" "),s("li",[t._v("public/private")]),t._v(" "),s("li",[t._v("s-max-age")])]),t._v(" "),s("h3",{attrs:{id:"刷新对缓存影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刷新对缓存影响"}},[t._v("#")]),t._v(" 刷新对缓存影响")]),t._v(" "),s("ul",[s("li",[t._v("ctrl+F5 强制刷新，直接从服务器加载，跳过强缓存和协商缓存")]),t._v(" "),s("li",[t._v("f5刷新，会跳过强缓存，但是会检查协商缓存")]),t._v(" "),s("li",[t._v("浏览器地址中写入url，回车，会依次强缓存-协商缓存去查。")])]),t._v(" "),s("h2",{attrs:{id:"_5、https加密过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、https加密过程"}},[t._v("#")]),t._v(" 5、https加密过程")]),t._v(" "),s("h3",{attrs:{id:"客户端怎么验证数字证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端怎么验证数字证书"}},[t._v("#")]),t._v(" 客户端怎么验证数字证书")]),t._v(" "),s("ol",[s("li",[t._v("首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验。")]),t._v(" "),s("li",[t._v("浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否\n为合法机构颁发")]),t._v(" "),s("li",[t._v("如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的，如果找到，那么浏览器就会从操作系统中取出颁发者CA的\n公钥，然后对服务器发来的证书里面的签名进行揭秘。")]),t._v(" "),s("li",[t._v("浏览器使用相同的hash算法根据证书内容计算出信息摘要，将这个计算的值与证书解密的值做对比")]),t._v(" "),s("li",[t._v("对比结果一致，则证明服务器发来的证书的合法，没有被冒充。此时浏览器就可以读取证书中的公钥，用于后续加密。")])]),t._v(" "),s("h2",{attrs:{id:"_6、flex-1由哪些属性组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、flex-1由哪些属性组成"}},[t._v("#")]),t._v(" 6、flex：1由哪些属性组成")]),t._v(" "),s("p",[t._v("由flex-grow、flex-shrink、flex-basis三个属性的所写。")]),t._v(" "),s("h3",{attrs:{id:"flex-grow-定义项目放大的比例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow-定义项目放大的比例"}},[t._v("#")]),t._v(" flex-grow: 定义项目放大的比例")]),t._v(" "),s("p",[t._v("默认为0，即使存在剩余空间，也不会放大；")]),t._v(" "),s("p",[t._v("所有项目的flex-grow为1：等分剩余空间(自动放大占位)；")]),t._v(" "),s("p",[t._v("flex-grow为n的项目，占据的空间（放大的比例）是flex-grow为1的n位。")]),t._v(" "),s("h3",{attrs:{id:"flex-shrink-定义项目缩小的比例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink-定义项目缩小的比例"}},[t._v("#")]),t._v(" flex-shrink: 定义项目缩小的比例/")]),t._v(" "),s("p",[t._v("默认为1；即：如果空间不足，该项目则缩小；")]),t._v(" "),s("p",[t._v("所有项目的flex-shrink为1：当空间不足时，缩小的比例相同。")]),t._v(" "),s("p",[t._v("flex-shrink为0：空间不足时，该项目不会缩小。")]),t._v(" "),s("p",[t._v("flex-shrink为n的项目，空间不足时缩小的比例是flex-shrink为1的n倍。")]),t._v(" "),s("h3",{attrs:{id:"flex-basis-定义再分配多余空间之前-项目占据的主轴空间-main-size-浏览器根据此属性计算主轴是否有多余空间。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis-定义再分配多余空间之前-项目占据的主轴空间-main-size-浏览器根据此属性计算主轴是否有多余空间。"}},[t._v("#")]),t._v(" flex-basis：定义再分配多余空间之前，项目占据的主轴空间（main size），浏览器根据此属性计算主轴是否有多余空间。")]),t._v(" "),s("p",[t._v("默认值为auto，即项目原本大小。")]),t._v(" "),s("p",[t._v("设置后项目将占据固定空间。")]),t._v(" "),s("h2",{attrs:{id:"_7、304是什么意思-一般什么场景出现-命中强缓存返回什么状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、304是什么意思-一般什么场景出现-命中强缓存返回什么状态码"}},[t._v("#")]),t._v(" 7、304是什么意思，一般什么场景出现，命中强缓存返回什么状态码")]),t._v(" "),s("p",[t._v("304表示命中协商缓存。")]),t._v(" "),s("ul",[s("li",[t._v("请求头last-modified的日期与响应头的last-modified一致")]),t._v(" "),s("li",[t._v("请求头if-none-match的hash与响应头的etag一致\n这两种情况会返回Status Code: 304")])]),t._v(" "),s("p",[t._v("强缓存命中，状态码为200")]),t._v(" "),s("h2",{attrs:{id:"_8、pushstate、replacestate可以触发popstate嘛。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、pushstate、replacestate可以触发popstate嘛。"}},[t._v("#")]),t._v(" 8、pushState、replaceState可以触发popState嘛。")]),t._v(" "),s("p",[t._v("答案是：不能。")]),t._v(" "),s("p",[t._v("仅改变网址，页面不会真的跳转，也不会获取新的内容，本质上网页还停留在原页面上。")]),t._v(" "),s("p",[t._v("history.go()、back()、forWard()会触发popState")]),t._v(" "),s("h2",{attrs:{id:"_9、tree-shaking是什么-原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、tree-shaking是什么-原理是什么"}},[t._v("#")]),t._v(" 9、tree-shaking是什么，原理是什么？")]),t._v(" "),s("p",[t._v("tree-shaking是删除重复代码和未引用的代码一种手段。")]),t._v(" "),s("p",[t._v("原理：利用ESModule引入的静态分析，故而编译的时候正确判断到底加载了哪些模块。")]),t._v(" "),s("p",[t._v("静态分析程序流，判断哪些模块和变量未被使用或者引用，进而删除对应代码。")]),t._v(" "),s("h3",{attrs:{id:"commonjs和es-module的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs和es-module的区别"}},[t._v("#")]),t._v(" commonJS和ES Module的区别")]),t._v(" "),s("ul",[s("li",[t._v("commonJS是值的一个拷贝，ES Module是值的一个引用")]),t._v(" "),s("li",[t._v("CommonJS是运行是加载，ES Module是编译时输出接口")]),t._v(" "),s("li",[t._v("commonJS是单个值的导出（一个对象），ES Module可以导出多个")]),t._v(" "),s("li",[t._v("commonJS是动态语法可以写在判断中，ES Module只能写在顶层模块。")]),t._v(" "),s("li",[t._v("CommonJs的this是当前模块，ES Module的this是undefined。")])]),t._v(" "),s("h2",{attrs:{id:"_10、babel是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、babel是什么"}},[t._v("#")]),t._v(" 10、babel是什么")]),t._v(" "),s("p",[t._v("babel，是一个JS编译器，它可以让开发者在开发过程中使用各类方言（jsx、flow、ts）而无需担心它的运行环境，因为它可以\n按需转换为低版本兼容的代码。")]),t._v(" "),s("p",[t._v("@babel/core")]),t._v(" "),s("p",[t._v("@babel/parser")]),t._v(" "),s("p",[t._v("@babel/traverse")]),t._v(" "),s("p",[t._v("@babel/generator")]),t._v(" "),s("h2",{attrs:{id:"_11、原型链判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、原型链判断"}},[t._v("#")]),t._v(" 11、原型链判断")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.protoType")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Funtion.protoType")]),t._v("\nObject "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nFunction "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"_12、-raf、ric"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12、-raf、ric"}},[t._v("#")]),t._v(" 12、 RAF、RIC")]),t._v(" "),s("p",[t._v("requestAnimationFrame： 告诉浏览器在下次重绘之前执行传入的回调函数(通常是操纵 dom，更新动画的函数)；\n由于是每帧执行一次，那结果就是每秒的执行次数与浏览器屏幕刷新次数一样，通常是每秒 60 次。")]),t._v(" "),s("p",[t._v("requestIdleCallback：会在浏览器空闲时间执行回调，也就是允许开发人员在主时间循环中执行低优先级任务，而不影响一些\n延迟关键事件。如果有多个回调，会按照先进先出原则执行，但是当传入了timeout，为了避免超时，有可能会打乱这个顺序。")])])}),[],!1,null,null,null);a.default=e.exports}}]);